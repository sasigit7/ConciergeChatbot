// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id             String         @id @default(cuid())
  name           String
  slug           String         @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  users          User[]
  apiKeys        ApiKey[]
  conversations  Conversation[]
  messages       Message[]
  embeddings     Embedding[]
  webhookEvents  WebhookEvent[]
}

model User {
  id            String         @id @default(cuid())
  tenantId      String
  email         String         @unique
  passwordHash  String
  role          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  conversations Conversation[]
}

model ApiKey {
  id          String   @id @default(cuid())
  tenantId    String
  key         String   @unique
  createdAt   DateTime @default(now())
  lastUsedAt  DateTime?
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model Conversation {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String?
  status      String   @default("open")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  messages    Message[]
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id])
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  tenantId       String
  sender         String
  content        String
  metadata       Json?
  createdAt      DateTime      @default(now())
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  tenant         Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model Embedding {
  id        String   @id @default(cuid())
  tenantId  String
  content   String
  vector    Bytes
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model WebhookEvent {
  id        String   @id @default(cuid())
  tenantId  String
  type      String
  payload   Json
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}
